 c#
é uma linguagem orientada a objeto e fortemente tipada
a sintaxe do c# é similar a do c,c++ ou java
suporta os conceitos de encapsulamento, herança e polimorfismo(OO)
Os programas c# são executados no .NET, que inclui:
CLR (Common Language Runtime)
Conjunto unificado de bibliotecas de classes
Como funciona?
O codigo-fonte escrito em c# é compilado em uma linguagem intermediaria (IL)
O codigo e os recursos de IL são armazenados no disco em um arquivo executavel chamado assembly, geramente com uma extensao exe. ou d.dll
Quando o programa c# é executado, o assembly é carregado no CLR
Em seguida o CRL executara a compilaçao just in time (JIT) para converter o codigo IL em instruçoes de maquina nativas
O CLR tambem fornece outros serviços
*garbage collector/ferramenta que coleta o lixo, valida, verifica objetos na memoria que nao estao sendo utilizados e desaloca esses objetos da memoria para liberar espaço, para nao ficar lento 
*exception handler/ receber e controlar as exeçoes de erros que ocorre no nosso codigo 
*resources manager / gerenciador de recursos 
Estrutura de programa
principais conceitos organizacionais em C# são


programas
namespaces
tipos
membros
assemblies

Programas c# consistem em um ou mais arquivos
Os programas declarams tipos, que contem membros e cpodem ser organizados em namespaces
classes e  interfaces sao exemplos de tipos
campos, metodos, propriedades e eventos sao exemplos de membors
quando os programas c# sao compilados , eles sao fisicamente empacotados em assemblies
os assemblies geralmente tem a extensao de arquivo .exe ou dll., dependendo se sao aplicações ou bibliotecas

Variaveis
tipos de valor
variaves de tipos de valor contem diretamente seus dados 
As variáves têm sua própria cópia dos dados e não é possível que as operações afetem outra variavel(exceto no saco das variaveis de parametro ref e out)

tipos de valor
numericos:sbyte, short, int, long, byte, ushort, uint, ulong
Caracteres Unicode: char
Pontos flutuantes: float, double, decimal
Booleano: bool
enum, struct e tipos nullable (Exemplo int?)

Tipos de referência
Variáveis de tipos de referencia armazenam referencias e seus dados
è possivel que duas variáveis façam referencia ao mesmo objeto e, portanto, que operações em uma variável afetem o objeto  e, portanto, que operações em uma variável afetem o objeto referenciado pela outra variavel
tipos de classe: class, object, string
tipos de arrays: int[], int[,], 
interface, delegate tambem sao tipos de referencia no c#

instruções 
Ações de um programa são expressas usando instruções
{
em um bloco permite que várias instruções sejam escritas em contextos
}delimitados por chaves {}
Declaração de variáveis e constantes locais 
if
switch
while
do
for
foreach
break
continue
return
throw
try .. catch .. finally
using
! diferente de  ex: if(args.Length !=2)

array
um array é uma estrutura de dados que contem um numero x de elementos, todos do mesmo tipo, que sao acessados atraves de indices computados
arrays sao tipos de referencia e a declaração de uma variavel array simplesmente reserva espaço para uma referencia de uma instancia de array
ao criar um array e especificado o tamanho da nova instancia, que é fixo durante todo o tempo de vida da instancia
os indices dos elementos de um array variam de 0 a comprimento do array -1
array unidimensional
int[] a - new int [10];
for (int i = 0; i < a.Length; i++)
{
  a[i] = i * i;
}
for (int i = 0; i< a.Length; i++)
{
  Console.WriteLine($"a[{i}] = {a[i]}");

array multidimensional
int[,] a2 = new int [10, 5];
int [,,] a3 = new int [10, 5, 2];

Inicializador de array
int[] a = new int [] {1, 2, 3};
int[] a= {1, 2, 3};

Copiar um array
int[] arrai-de-destino = new int[array-a-ser-copiado * 2 ]; 
Array.Copy(arrai-a-ser-copiado, array-de-destido, array-a-ser-copiado.Length);

Redimensionar um array
int[] arrai-de-destino = new int[array-a-ser-copiado * 2 ]; //redimensionar o array para o dobro da capacidade
Array.Resize(ref array-a-ser-redimensionado, array-a-ser-redimensionado.Length * 2);

classes e objetos
classes sao os tipos mais fundamentais de c#
uma classe é uma estrutura de dados que combina estado (campos) e ações (metodos)
objetos sao instancias de uma classe
as classes suportam herança e polimorfismo, mecanismos pelos quais as classes derivadas podem estender e especializar as classes base

public class Ponto
{
 public int x, y;
 public Ponto(int x, int y)
 {
  this.x = x;
  this.y = y;
  }
}
Instancias de classes(objetos) sao criadas usando o operador new, que aloca memoria para uma nova instancia, chama um construtor para incicializar a instancia e retorna uma referencia á instancia
Ponto p1 = new Ponto (0, 0)
Ponto p2 = new Ponto (10, 20);

A memoria ocupada por um objeto é recuperada automaticamente quando o objeto nao esta mais acessivel. nao é necessario nem possivel desalocar explicitamente objetos em C#

Membros 
os membros de uma classe podem ser estaticos ou membros da instancia
membros estaticos pertencem a classe e membros de instancia pertencem ao objeto
constantes, variaveis, metodos, propriedades, construtores, etc..

Assecibilidade
cada membro de uma classe tem uma acesibilidade associada, que controla as regioes do texto do programa que podem acessar o membro
podem ser:
public, protected, internal, private

Herança
uma declaração de classe pode especificar uma classe base, herdando os membros public, internal e protected da classe base
omitir uma especificação de classe base é o mesmo que derivar do tipo object

Metodos
um metodo é um membro que implementa uma computação ou ação que pode ser executada por um objeto ou classe
os metodos podem ter uma lista de parametros, que representam valores ou referencias de  variaveis passados para o metodo e um tipo de retorno, que especifica o tipo do valor calculado e retornado pelo metodo

structs 
Como as classes, structs sao estruturas de dados que podem conter membros de dados e membors de ação, mas d diferentemente das classes, as structs sao tipos de valor e nao requerem alocação de heap
uma variavel de um tipo de struct armazena diretamente os dados da estrutura, enquanto uma variavel de um tipo de classe armazena uma referencia a um objeto alocado na memoria
structs nao aceitam herança determinada pelo desenvolvedor 
sao uteis para pequenas estruturas de dados que possuem semantica de valor numeros complexos, pontos  em um sistema de coodrdenadas ou pares de chave-valor em um dicionario sao bons exemplos de utilização
o suo de structs em vez de clsasses para pequenas estruturas de dados pode fazer uma grande diferença no numero de alocaç~es de memoria
Construtores de structs sao chamados com o operador new, semelhante a um construtor de classe, mas em vez de alocar dinamicamente um objeto no heap gerenciado e retornar uma referencia a ele, um construtor struct simplesmente retorna o proprio valor struct( normalmente em um local temporario na stack) e esse valor é copiado conforme necessario

iterfaces
uma interface define um  contrato que pode ser implementado por classes e structs
uma interface pode conter metodos, propriedades, eventos e indexadores
uma interface nao fornece implementações dos membors que define - apenas suas assinaturas
as interfaces podem empregar herança multipla

enums
um enum é um tipo de valor distinto com um conjunto de constantes nomeadas
voce define enumerações quando precisa definir um tipo que pode ter um conjunto de valores discretos
eles usam um dos tipos de valor integral como armazenamento subjacente. Eles fornecem significado semantico aos valores discretos
Cada tipo de enum possui um tipo integral correspondente chamado tipo subjacente do tipo do enum
um tipo de enumeração que nao declara explicitamente um tipo subjacente tem um tipo subjacente int


programaçao orientada a objetos


prop no visual code cria uma classe publica / atalho


criar lista 
List <string> listaString = new List<string>();
listaString.Add("algo");
listaString.Add("algo2");
for (int contador = 0; contador <listaString.Count; contador++)
{
 Console.WriteLine($"Posição Nº {contador} - {listaString[contador]}");
}

usando o foreach
int contadorForeach = 0;
foreach(string item in listaString)
{

Console.WriteLine($"Posição Nº {contadorForeach} - {item}");
contadorForeach++;
}





propriedades
uma propriedade é um membro que oferece um mecanismo flexivel para ler, gravar ou calcular o vaolr de um campo particular
prop /declara uma propriedade
a diferença entre um campo e uma propriedade é o get, set
é uma propriedade qnd tem/ public int exemplo {get, set}
é um campo campo / private string _nome;
quadradinho = metodo
chavinha inglesa = propriedade


.ToUpper()/colocar todas as letras maiusculas


metodo
um metodo é um bloco de codigo que contem uma serie de instruções

nao faz parte do metodo
 |                 metodo
 |                 |
public void AdicionarAluno(Pessoa aluno)
         |                      |
       tipo de retorno          |
                               chamando os parametros(argumentos)

metodos diferentes de void tem que ter um retorno/ return exemplo;


construtores 
Os construtores permitem que o programador defina valores padrão, limite a instanciação e grave codigos flexiveis e faceis de ler
todo construtor vai ter o mesmo nome da classe

public class pessoa
{ 
  public Pessoa()
  {
   
  }

Concatencação de strings
Podemos formatar valores em diversas representações. Essa formatação de valores é conhecida por concatenação ou interpolação
concatenação = " " + " " ;
interpolação = $"{} {} {} ";

Formatar Valore Monetarios
exemplo:
real
 using ExemploExplorando.Models;
 
 decimal valorMonetario = 82.40M;
 
 Console.WriteLine($"{valorMonetario:C}");

dolar
using ExemploExplorando.Models;
using System.Globalization;
CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");

 decimal valorMonetario = 82.40M;
 
 Console.WriteLine($"{valorMonetario:C}");

ALTERAR CULTURA 
using ExemploExplorando.Models;
using System.Globalization;
CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("pt-BR");

 decimal valorMonetario = 82.40M;
 
 Console.WriteLine(valorMonetario.ToString("C" , CultureInfo.CreateSpecificCulture("en-US")));


Formataçao personalizada
 Console.WriteLine(valorMonetario.ToString("C")
 Console.WriteLine(valorMonetario.ToString("C1") 1 casa decimal
 Console.WriteLine(valorMonetario.ToString("C3") 3 casas decimais 

Porcentagem

double porcentagem = .3421;
Console.WriteLine(porcentagem.ToString("P"));

Agrupar 

int numero = 123456;
Console.WriteLine(numero.ToString("##-##-##"));
vai sair no console assim 12-34-56

DateTime

using System;

DateTime data = DateTime.Now;
Console.WriteLine(data); sai no console a data e a hora 
Console.WriteLine(data.ToString("dd/MM/yyyy HH:mm")); personalizar o datetime

formatar o DateTime
Console.WriteLine(data.ToShortTimeString()); mostra somente as horas
Console.WriteLine(data.ToShortDataString()); mostra somente a data

Parse e Tryparse

using System.Globalization;
string dataString = "2022-13-07 18:00";

DateTime.TryParseExact(dataString,
                       "yyyy-MM-dd HH:mm",
                        CultureInfo.InvariantCulture,
                        DateTimeStyles.None, out DateTime data);
Console.WriteLine(data);

tryparse validado  ele valida e não encerra o programa com erro
using System.Globalization;

string dataString = "2022-12-07 18:00";

bool sucesso = DateTime.TryParseExact(dataString,
                       "yyyy-MM-dd HH:mm",
                        CultureInfo.InvariantCulture,
                        DateTimeStyles.None, out DateTime data);
if (sucesso)
{
    Console.WriteLine($"Conversao com sucesso!! Data: {data}");
}
else
{
    Console.WriteLine($"{dataString} não é uma data valida");
}


exceptions
or recursos de manipulação de exceção da linguagem C# ajudam voc~e a lidar com quaisquer situaçõse excepcionais ou inesperadas que ocorram quando um programa for executado
uma exceção é quando um programa não tem mais saida, ele estava fazendo o que foi programado mas uma condição externa cortou o fluxo do programa. Uma condição externa que não tem como o programa prever. 

finally
vai executar o codigo independente se acontecer um erro ou não


Coleções - 	Queue / fila
quem chegou primeiro sai primeiro 
quem ta por ultimo sai por ultimo
FIFO first in first out

Queue<int> fila = new Queue<int>();
fila.Enqueue(2);
fila.Enqueue(4);
fila.Enqueue(6);
fila.Enqueue(8);

foreach(int item in fila)
{
   Console.WriteLine(item);
}
   Console.WriteLine($"Removendo o elemento: {fila.Dequeue()}");

remover item da lista
fila.Dequeue(); 
não passa nenhum argumento pois o primeiro item a entrar na lista é o primeiro a sair 



Coleções - Stack - pilha
LIFO last in first out
ultimo a entrar é o primeiro a sair 
vai sempre tirando do topo

Stack<int> fila = new Stack<int>();

pilha.Push(4);
pilha.Push(6);
pilha.Push(8);
pilha.Push(10);

foreach(int item in pilha)
{
 Console.WriteLine(item);
}
Console.WriteLine($"Removendo o elemento do topo: {pilha.Pop()}");
pilha.Push(20);

foreach(int item in pilha)
{
 Console.WriteLine(item);
}

Remover objeto da pilha
pilha.Pop(); nao declara argumento pois sempre vai remover o elemento do topo, ultimo elemento a entrar 

Dictionary
 Coleção de chave valor para armazenar valores únicos sem uma ordem especifica
 ele serve para quando se tem uma chave composta e vc precisa que esses elementos sejam unicos, caso nao seja unicos ele vai adicionar uma exceção
declarar um Dictionary
Dictionary<string, string> estados = new Dictionary<string, string>();
             |        |
             |        elemento 2 valor que a chave representa
             elemento 1 chave tem que ser unico se ele se repetir vai causar uma exceção
a chave pode ser string, inteiro... nessa caso é string e o valor que ela vai armazenar tbm vai ser string

Dictionary<string, string> estados = new Dictionary<string, string>();
estados.Add("SP", "São Paulo");
estados.Add("BA", "Bahia");
estados.Add("MG", "Minas Gerais");

foreach(var item in estados)
{
 Console.WriteLine($"Chave: {item.key}, valor: {item.Value}");
}

Remover elemento do Dictionary
estados.Remove("BA"); vai remover o elemento selecionado

Dictionary<string, string> estados = new Dictionary<string, string>();
estados.Add("SP", "São Paulo");
estados.Add("BA", "Bahia");
estados.Add("MG", "Minas Gerais");

foreach(var item in estados)
{
 Console.WriteLine($"Chave: {item.key}, valor: {item.Value}");
}
 Console.WriteLine("-------------------");
estados.Remove("BA");
foreach(var item in estados)
{
 Console.WriteLine($"Chave: {item.key}, valor: {item.Value}");
}


Alterar os valores das chaves
Não da para alterar as chaves, somente os valores
estados["SP"] = "São Paulo - valor alterado";

Verificando elemento do Dictionary

if(estados.ContainsKey(chave))
{
 Console.WriteLine($"Valor existente: {chave}");
}
else
{
 Console.WriteLine($"Valor não existente. É seguro adicionar a chave: {chave}");
}

Obter um valor de um elemento no Dictionary
Console.WriteLine(estados["MG"]);


Tuplas
Tuplas fornece sintaxe concisa para agrupar varios elementos de dados em uma estrutura de dados leve
tuplas sao uma alternativa à criação de classes

declarando uma tupla
(int Id, string Nome, string Sobrenome, decimal Altura) tupla = (1, "Nome", "sobrenome", 1.80M);
Console.WriteLine($" Id: {tupla.Id});
Console.WriteLine($" Nome: {tupla.Nome});
Console.WriteLine($" Sobrenome: {tupla.Sobrenome});
Console.WriteLine($" Altura: {tupla.Altura});

outra sintaxe da tupla

ValueTuple<int, string, string, decimal> outroExemploTupla = (1, "Nome", "sobrenome", 1.80M);

Console.WriteLine($" Id: {tupla.Item1});
Console.WriteLine($" Nome: {tupla.Item2});
Console.WriteLine($" Sobrenome: {tupla.Item3});
Console.WriteLine($" Altura: {tupla.Item4});

mais um exemplo de sintaxe da tupla

var outroExemploTuplaCreate = Tuple.Create(1, "Nome", "sobrenome", 1.80M);


Console.WriteLine($" Id: {tupla.Item1});
Console.WriteLine($" Nome: {tupla.Item2});
Console.WriteLine($" Sobrenome: {tupla.Item3});
Console.WriteLine($" Altura: {tupla.Item4});


Tuplas em métodos

public class LeituraArquivos
{
 public (bool Sucesso, string[] Linhas, int QuantidadeLinhas) LerArquivos(string caminho)
 {
   try
     {
       
        string[] linhas = File.ReadAllLines(caminho);
        return (true, linhas, linhas.Count());
     }
     catch (Exception)
     {
        return(false, new string[0], 0);
      }
    }
}

DESCARTE
colocar underline( _ ) para descartar as informações não utilizadas


Descontrutor
ele separa as informações para o retorno
ele desconstroi para variaveis separadas

IF Ternário
mais legivel, menos linhas 

int numero = 10;
bool ehPar = false;
ehPar = numero % 2 == 0;
Console.WriteLine($"O número {numero} é " + (ehPar ? "par" : "ímpar"));

IF não Ternário
 int numero = 20;
        if (numero % 2 == 0)
        {
            Console.WriteLine($"O número: {numero} é par");
        }
        else
        {
            Console.WriteLine($"O numero {numero} é impar");
        }



Gerenciador de pacotes
o que é um pacote?
um pacote é um conjunto de codigos uteis, que possibilita o compartilhamento e reuso do codigo
Nuget é um gerenciado de pacotes, que permite desenvolvedores compartilharem codigos e bibliotecas

Serialização de dados
O processo de serializar consiste em transfomar objetos em um fluxo de bytes para seu armazenamento ou transimessão

JSON
javascript notation object é um formato de texto que segue a sintaxe do Javascript, muito usado para transimitir dados entre aplicações
caracteristicas que representa um JSON,ele padroniza a escrita de um objeto em um formato de texto chamado de JSON
formato texto que representa um objeto, para comunicar com outras aplicações
por exemplo mandar dados do dotnet para o java, ou qualquer outra linguagem
intermediario para serializar os dados para ter comunicação entre diferentes sistemas
usado para integração  e comunicação
muito utilizado e padronizado para fazer troca de informações
é um formato independente de linguagem e vc pode utilizar tanto para fazer integrações tanto dentro do proprio sistema

Converter para o formato Json
colocar no using o pacote instalado do Json

using Newtonsoft.Json;

Venda v1 = new Venda(1, "Material de escritorio", 25.00M);

string serializado = JsonConvert.SerializeObject(v1, Formatting.Indented);

Console.WriteLine(serializado);

vai sair no console:
{
 "Id": 1,
 "Produto": "Material de escritorio",
 "Preco": 25.00
}
ele tem um abre e fecha chaves, todo nome de propriedade vai começar com aspas duplas e terminar com aspas duplas, numero inteiro representa normal e strings sao representadas com aspas duplas tbm
ele deixa de ser um objeto e vira uma string, para qualquer linguagem fazer a leitura desse objeto pois ele esta serializado no formato Json

compartilhar o dado com o cliente de outro sistema
File.WriteAllText("Arquivos/vendas.json", serializado); ele vai salvar o texto que foi serializado em um arquivo .json

colchetes no arquivo Json significa que tem uma coleção
abre e fecha chaves significa inicio e fim de um objeto
quando fecha a chave percebe-se que tem uma virgula, essa virgula indica que tem mais um objeto

ISO 8601 = padronização de datas 

Atributos
adiciona uma metadata a uma propriedade, e essa propriedade vai usar esse atributo como instrução.
suponhamos que um cliente enviou um arquivo Json e o nome da propriedade foge das convenções do c#, ai é preciso usar um atributo 
ex:
     public int Id {get; set}
     
     [JsonProperty("Nome_Produto")]  isso diz ao seu programa q o nome que esta vindo é Nome_Produto e atribuindo ela a Produto
     public string Produto {get; set;}



Tipos de valor nulo (nullable)
Um tipo de valor nulo permite representar o tipo da variavel e adicionalmente, o valor nulo
bool = true, false
bool? = true, false, null


bool? desejaReceberEmail = null;
if(desejaReceberEmail.HasValue && desejaReceberEmail.Value)
{
 Console.WriteLine("O usuario optou por receber e-mail.");
}
 else 
{
  Console.WriteLine("O usuario não respondeu ou optou por não receber e-mail");
}


tipos Anonimos 
os tipos anonimos fornecem um modo conveniente de encapsular propriedades somente leitura
uma variavel que representa alguns valores seja em propriedades somente leitura

var tipoAnonimo = new {Nome = "Leonardo", Sobrenome = "Buta", Altura = 1.80 };
Console.WriteLine("Nome: " + tipoAnonimo.Nome);


tipo Anonimo em coleção

string conteudoArquivo = File.ReadAllText("Arquivos/vendas.json");

List<Venda> listaVenda = JsonConvert.DeserializeObject<List<Venda>>(conteudoArquivo);

var listaAnonimo = listaVenda.Select(x => new {x.Produto, x.Preco });

foreach(var venda in listaAnonimo)
{
 Console.WriteLine($"Produto: {venda.Produto}, Preço: {venda.Preco}");
}


Variavel dinamica
dynamic 
ela pode assumir diversos tipos 


Classes genéricas
As classes genéricas encapsulam operações que não são especificas de um determinado tipo de dados
List<tipo> lista = new List<tipo>();

ex: namespace Models
    {
      public class MeuArray<T>
      {
        private T[] array = new T[10];
      }
     }
o "T" significa type(tipo), ele vai ser substituido conforme o valor passado

namespace Models
    {
      public class MeuArray<T>
      {
        private static int capacidade = 10;
        private int contador = 0;
        privat T[] array = new T[capacidade];
        
        public void AdicionarElementoArray(T elemento)
        {
         if (contador +1 < 11 )
          {
            array[contador] = elemento;
          }
          contador++;
      }
        public T this [int index]
        {
           get {retur array[index];}
           set { array[index] = value; }
         }
     }




Métodos de extensão
os metodos de extenssao permitem que voce adicione tipos existentes esm criar um novo tipo derivado, recompiçlar ou, caso contrario modifficar o tipo original


Alocação de memória 
vamos entender os dois tipos de memória existentes no C#, tipos de valores e tipos de referência


declaração de variável
void Metodo() {
int a = 5 ;
int b = 10;
Pessoa p1 = new Pessoa();
}


int a = 5 ;
 |  |   |valor que ela recebe
 |  |nome
 |tipo
esse tipo de variavel vai para o stack

Pessoa p1 = new Pessoa() esse tipo de metodo vai para o Stack e para o heap


|p1 (ref)|--------------> |p1 objeto 
|b = 10  |                |
|a = 5   |                |
| STACK  |                |   HEAP


no stack(pilha) fica armazenado o nome e o valor da variavel

o metodo armazena uma referencia no stack para o heap
ele pode armazenar alem de valores inteiros ele pode armazenar qualquer coisa, mais complexo
esse tipo mais complexo fica na memoria heap, onde fica a verdadeira representação e onde o objeto fica
por ser mais complexo ele armazena na memoria heap
ele cria na memoria stack e armazena o valor e referencia para o objeto que esta representado na memoria heap
classes, interfaces, metodos armazenado na heap
mais simples como valores int, decimal, bool e armazenado na stack


Limpeza de memoria
O Garbage Collector (GC)
ele limpa todos os dados da memoria heap que estao sem referencia para uma variavel em uso
fica em constante execução
os da stack vai limpando LIFO 



Tipos de valor e referência
Tipos de valor: Uma variavel de um tipo de valor contem uma instancia do tipo
tipos de referência: Uma variável de um tipo de referência contém uma referência a uma instância do tipo




Tipos de referência ->|p1 (ref)|--------------> |p1 objeto 
tipos de valor ------>|b = 10  |                |
tipos de valor ------>|a = 5   |                |
                      | STACK  |                |   HEAP


tipos de valor = armazena os valores nele mesmo, sao conhecidos por serem mais simples tipos primitivos
tipos de referência = armazena apenas o nome da variavel e uma referencia para a memoria heap


tipo valor

 void metodo(){       |        |                | 
 int a = 5;           |b = 5   |                |
 int b = a;           |a = 5   |                |
 }                    | STACK  |                |   HEAP


tipo referência

void Metodo() {                                   |        |     |        |
Pessoa p1 = new Pessoa("Bnero" , "Nero");         |        |     |        |
Pessoa p2 = p1;                                   |p2(ref) |---->|Pessoa  |
p2.Nome = "Eduardo";                              |p1(ref) |---->|(objeto)|
}                                                    Stack       Heap




POO
A POO é um paradigma de programação, ou seja, corresponde a uma técnica de programação para um fim especifico
paradigma é um conjunto de regras, uma maneira de fazer as coisas
4 pilares da POO
*abstração
*encapsulamento
*herança
*polimorfismo

O principal conceito da POO são classes e objeto!
a classe é a representação de um objeto
objeto é a classe concretizada
classe e objeto estão muito ligados mas sao coisas diferentes, classe e um representação de algo do mundo real onde coloca-se suas caracteristicas, e  o objeto é uma implementação da classe


paradigmas de programação
um paradigma nada mais é do que um modelo de tecnicas, estruturas e formas de solucionar um problema
paradigma de programação é diferente de linguagem de programação
uma linguagem de programação implementa um ou mais paradigmas


Paradigmas de progamação
exemplos
*programação orientada a objetos
*programação estruturada
*programação imperativa
*programação procedural
*programação orientada a eventos
*programação logica



Abstração 
abstrair um objeto do mundo real para um contexto especifico, considerando apenas os atributos importantes
ex: pessoa 
|+nome: string|
|+idade: int  |
|+apresentar()|->metodo
   classe

Encapsulamento
O encapsulamento serve para proteger uma classe e definir limites para alterações de suas propriedades
Serve para ocultar seu comportamento e explor somente o necessário


Herança
a herança nos permite reutilizar atributos, métodos e comportamentos de uma classe em outras classes
serve para agrupar objetos que são do mesmo tipo, porém com caracteristicas diferentes
 
ex:
namespace ExemploPOO.Models
{
 public class Aluno : Pessoa
 {
 }
}

a classe Aluno está herdando de Pessoa 

Polimorfismo
O polimorfismo vem do grego e significa "muitas formas"
com o polimorfismo, podemos sobrescrever métodos das classes
filhas para que se comportem de maneira diferente e ter sua própria implementação

Polimorfismo tem o objetivo de sobrescrever os metodos da sua classe derivada, permitindo implementarmos classes especializadas

Polimorfismo em tempo de execução (override/ Late binding)
esse sim depende de herança

na frente do "public" coloca a palavra "virtual" que significa que o metodo pode ser sobreescrito se a classe filha desejar

ex: na classe mãe no metodo que deseja alterar
   
public class Pessoa
{
  public string Nome {get; set; }
  public int Idade {get; set; }
  public string Email {get; set; }
  
  public virtual void Apresentar() - o metodo a ser sobreescrito
 {
  Console.WriteLine($"Ola, meu nome é {Nome} e tenho {Idade} anos!");
  }
}

na classe filha:

public class Aluno : Pessoa
{
 public double Nota {get; set;}
 
 public override void Apresentar() - coloca "override" para sobrescrever o método
 {
  Console.WriteLine("ola, meu nome é {Nome}");
 }
}


Polimorfismo em tempo de compilação Overload/early binding

tem 2 tipos de polimorfismo, um que depende de herança e um que não depende

mais simples, conhecido como tempo de compilação(Overload/early binding) 
metodos com nomes iguais e tipos de retornos iguais porem com o numero de parametros diferentes

ex:
 public class Calculadora
 {
    public int Somar(int num1, int num2)
   {
     return num1 + num2;
    }
  
  public int Somar(int num1, int num2, int num3)
  {
    return num1 + num2 + num3;
  }
 }


Classe abstrata 
uma classe abstrata tem como objetivo ser exclusivamente um modelo para ser herdado, portanto não pode ser instanciada
Você pode implementar métodos ou deixa-los a cargo de quem herdar.
não pode ser istanciada, tem que ser herdada
ex: public abtratic class Conta
    {  
       protected decimal saldo;
      
       public abstract void Creditar(decimal valor);
      
       public void ExibirSaldo()
       {
         Console.WriteLine("O seu saldo é: " + saldo);
       }
    }
o metodo abstrato nao tem corpo {} ele não tem uma implementação, quem herdar da classe conta, vai ter que obrigatioriamente implementar o metodo Creditar
protected significa que é protegido por alterações externas com exceção das suas classes filhas
private somente a classe conta consegue acessar 
protected a classe conta e filhos da classe conta consegue acessar
para implementar o metodo abstrato na classe filha usa o override
ex: public class Corrente : Conta
    {
      public override void Creditar(decimal valor)
      {
           saldo += valor;
       }
     }



ctor = atalho para construtor 
ex: public Program (Parameters)
    {
     }

Construtor por Herança

Vamos supor que eu quero que ao instanciar a classe Pessoa seja obrigatorio passar o nome
como fazer isso?
Criar um contrutor que recebe uma string nome e falar que Nome é igual a nome
Problema parcialmente resolvido, de uma certa forma foi criado um construtor que exige o nome e ele esta passando para a propriedade nome
ou seja sempre que alguem instanciar a classe Pessoa tem que instanciar atraves desse construtor que exige o nome 
fazendo isso foi quebrada duas classes, Aluno e Professor
O aluno estava trabalhando com a classe Pessoa em um momento em que o nome não era obrigatorio, a partir do momento em que essa Pessoa passou a exigir o nome como obrigatorio pelo seu construtor o Aluno não sabe o que fazer, logo a classe foi quebrada
 
a minha classe Pessoa tem um unico construtor que exige nome, é obrigatorio passar o nome para fazer uma instancia de pessoa
porem minha classe aluno e professor nao estavam prevendo essas mudanças, ou seja eles nao sabem como se comportarem, tive que fazer uma atualização nelas para que elas nao quebrassem
como minha Pessoa o nome é obrigatorio, ele tem que criar um construtora tambem para a classe Aluno e Professor, se Pessoa exige nome e Aluno é filho de Pessoa o Aluno tambem vai exigir o nome, logo quando instancio a classe aluno, estou exigindo o nome tambem, so que não estou utilizando o nome aqui, estou simplesmente colocando : e a palavra base e entre parenteses o nome
significa que esta recebendo o nome e esta passando para a classe pai o nome

    
namespace POO.Models
{
    public class Pessoa
    {

        public Pessoa(string nome) -  esse construtor exige um nome para instanciar a classe
        {
            Nome = nome;
        }
        public string Nome { get; set; }    
        public int Idade { get; set; } 

        public virtual void apresentar()
        {
            Console.WriteLine($"O nome é: {Nome} e a idade é: {Idade}");
        }
    }

}



       public class Aluno : Pessoa
    {
        public Aluno(string nome) : base(nome) - Resolvendo a quebra, como a classe Aluno é filha de Pessoa ela tambem exige o nome tambem so que nao estou utilizando o nome aqui, estou coloando : e a palavra base e entre parenteses o nome, significa que esta recebendo o nome e esta passando para a classe pai 
        {
   
        }

        public int Nota { get; set; }

        public override void apresentar()
        {
            Console.WriteLine($"Olá meu nome é {Nome} e minha nota é {Nota}");
        }
    }
}



ao colocar um construtor vazio, da a opçao de nao colocar nada no nome ou de colocar
ao fazer isso na classe pai tambem tem que fazer nas classes filhas
exemplo:
 
namespace POO.Models
{
    public class Pessoa
    {
        public Pessoa()   - agora ele pode nao passar nada 
        {

        }
        public Pessoa(string nome) -  ou pode passar o nome 
        {
            Nome = nome;
        }
        public string Nome { get; set; }    
        public int Idade { get; set; } 

        public virtual void apresentar()
        {
            Console.WriteLine($"O nome é: {Nome} e a idade é: {Idade}");
        }
    }

}







Classe selada
Uma classe selada tem como objetivo  impedir que outras classes façam uma herança dela, ou seja, nenhuma classe pode ser sua derivada
tambem existem metodos e propriedades seladas
<<sealed>>
classe selada não podem ter classes filhas
e metodos selados não podem ser sobreescritos por suas classes filhas

ex: public sealed class Professor : Pessoa - classe selada
    {
     public decimal Salario {get; set; }
     public sealed override void Apresentar() - metodo selado
     {
     }
    }

Classe objetc
A classe System.Object é a mae de todas as classes na hierarquia do .NET
Todas as classes derivam, direta ou indiretamente da classe
Object, e ela tem como objetivo prover serviços de baixo nivel para suas classes filhas



Interfaces
Uma interface é um contrato que pode ser implementado por uma classe
é como se fosse uma classe abstrata, podendo definir métodos abstratos para serem implementados
assim como uma classe abstrata, uma interface não pode ser instanciada

no c# não tem o conceito de herança multipla, uma classe não pode herdar de duas classes ao mesmo tempo
uma classe pode implementar varias interfaces

ex: public interface ICalculadora
    {
       int Somar(int num1, int num2);
       int Subtrair(int num1, int num2);
       int Multiplicar(int num1, int num2);
       int Dividir(int num1, int num2);
     }

 implementando a interface 
 da mesma maneira que faz com a herança e inforamar o import dela(o lugar que ela esta)
 
ex: implementar a interface ICalculadora na classe Calculadora
    using POO.Interfaces;
    namespace POO.Models
    {
       public class Calculadora : ICalculadora
       {
         public int Somar (int num1, int num2) 
         { 
           return num1 + num2;
         }
         public int Subtrair (int num1, int num2) 
         { 
           return num1 - num2;
         }
         public int Multiplicar (int num1, int num2) 
         { 
           return num1 * num2;
         }
         public int Dividir (int num1, int num2) 
         { 
           return num1 / num2;
         }
     }



Program
  using POO.Models;
  using POO.Interfaces;

  ICalculadora calc = new Calculadora();
  estou utilizando a interface e passando a classe que implementa essa interface


Colocar um metodo padrao na interface
ex: public interface ICalculadora
    {
       int Somar(int num1, int num2);
       int Subtrair(int num1, int num2);
       int Multiplicar(int num1, int num2); - metodos que nao tem corpo são obrigatorios a implementação na classe
       int Dividir(int num1, int num2);
       {
        return num1 / num2; - metodos que tem corpo se torna opcional para sua implementação
       }
     }



